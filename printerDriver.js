// 1: печать страницы
let count = 5;
let mode = 'pageCopy'; // Режим работы драйвера печати
let pageNumber = 5; // Номер копируемой страницы
let copyCount = 7; // Количество копий
let totalPages = 6; // Всего страниц в документе
let startPage = 1; // Стартовая страница

for (let i = 0; i < count; i = i + 1) {
  console.log('Страница ' + i);
}
// 2: печать всех страниц документа
for (let page = 0; page < totalPages; page = page + 1) {
  console.log('Страница ' + page);
}
// 3: Исправим режим печати всех страниц.
// Сделаем так, что бы страницы печатались с 1, а не с 0
// и печатаем нужное количество стрвниц
// Измените исходное значение переменной page на 1.
// Измените в условии цикла «меньше» на «меньше или равно».
for (let page = 1; page <= totalPages; page = page + 1) {
  console.log('Страница ' + page);
}
// 4: Выведем страницы в обратном порядке.
// Измените начальное значение page с единицы на totalPages.
// Цикл должен выполняться, пока page больше нуля.
// После каждой итерации page должна уменьшаться на единицу.
for (let page = totalPages; page > 0; page = page - 1) {
  console.log('Страница ' + page);
}

// Инкремент (увеличение на единицу)	i++	i = i + 1
// Декремент (уменьшение на единицу)	i--	i = i - 1
// К-к-комбо!	i += 2	i = i + 2
// Комбинировать можно не только сложение,
// но и остальные математические операции: вычитание -=, умножение *=, деление /= и нахождение остатка %=.

// 5: Выведем только нечётные страницы.
// Замените операцию увеличения номера страницы с page++ на page += 2.
for (let page = 1; page <= totalPages; page += 2) {
  console.log('Страница ' + page);
}

// 6: Теперь выведем только чётные страницы.
// Для этого поменяйте начальное значение переменной page на 2

for (let page = 2; page <= totalPages; page += 2) {
  console.log('Страница ' + page);
}

// 7: Добавим режим печати копий.
// После объявления переменных добавьте условие, проверяющее, что mode имеет значение 'pageCopy'.
// Внутри этого условия добавьте цикл, который увеличивает переменную copies с единицы до copyCount включительно.
// Значение copies должно увеличиваться на единицу после каждой итерации.

if (mode === 'pageCopy') {
  for (let copies = 1; copies <= copyCount; copies++) {
    console.log('Печать страницы ' + pageNumber);
  }
}

// 8: Добавим режим вывода всех страниц документа.
// В конец программы добавьте проверку, сравнивающую mode со значением 'document'.
// Внутри этой проверки добавьте цикл, который увеличивает значение переменной page от 1 до totalPages включительно.
// Внутри цикла добавьте команду печати текущей страницы page.
// Измените значение переменной mode на 'document'

if (mode === 'document') {
  for (let page = 1; page <= totalPages; page++) {
    console.log('Печать страницы ' + page);
  }
}

// 9: Добавим режим вывода страниц документа в обратном порядке.
// В конец программы добавьте проверку, сравнивающую mode со значением 'reverse'.
// Внутри этой проверки добавьте цикл, который уменьшает значение переменной reversePage от totalPages до 1 включительно.
// Уменьшайте значение reversePage на единицу на каждой итерации.
// Внутри цикла добавьте команду печати текущей страницы reversePage.
// Измените значение переменной mode на 'reverse'

if (mode === 'reverse') {
  for (let reversePage = totalPages; reversePage >= 1; reversePage-- ) {
    console.log('Печать страницы ' + reversePage);
  }
}

// 10: Добавим режим вывода чётных и нечётных страниц документа.
// Добавьте в конец программы проверку для режима 'alternate'.
// Внутри этой проверки добавьте цикл,
// в котором значение переменной alternatePage увеличивается на 2 со значения startPage до totalPages включительно.
// Внутри цикла добавьте команду печати страницы alternatePage
// Смените значение переменной mode на 'alternate'
// Чтобы вывести чётные страницы, смените значение переменной startPage на 2

if (mode === 'alternate') {
  for (let alternatePage = startPage; alternatePage <= totalPages; alternatePage +=2) {
    console.log('Печать страницы ' + alternatePage);
  }
}

// 11: Накопление в цикле

let sum = 0;

for (let i = 1; i <= 5; i++) {
  sum += 2;
  console.log(sum);
}

// 12: Проверки в циклах

for (let i = 1; i <= 5; i++) {
  if (i > 2) {
    sum += 3;
  } else {
    sum += 2;
  }
  console.log(sum);
}

// 13: Поиск чётного числа
// Как проверить, что число чётное? Здесь может помочь оператор %.
// Он называется остаток от деления и, как понятно из названия, возвращает остаток от деления.

for (let i = 1; i <= 10; i++) {
  console.log('i: ' + i);
  if (i % 2 === 0) {
    sum += 2
    console.log('чётное число');
  } else {
    sum +=1
    console.log('нечётное число');
  }
}

// 14: Сколько стоит печать?
// Расход краски
// Для решения этой задачи будем использовать накопление значений в цикле.
// Заведём внешнюю переменную, куда будем добавлять 70 мг (расход на одну страницу) при печати каждой страницы документа.
// После переменной totalPages объявите переменную consumptionTotal равную 0
// После неё создайте переменную consumptionPerPage. Она равна 70
// Внутри цикла, после команды console.log, увеличьте значение переменной consumptionTotal на consumptionPerPage с помощью оператора +=
// Ниже, в цикле, выведите значение consumptionTotal в консоль.

let consumptionTotal = 0; // Общий расход тонера
let consumptionPerPage = 70; // Расход краски на одну страницу
for (let page = 1; page <= totalPages; page++) {
  console.log('Печать страницы ' + page);
  consumptionTotal += consumptionPerPage;
  console.log(consumptionTotal);
}

// 15: Экономичная печать
// первые три страницы печатаем как обычно,
// а на оставшихся экономим тонер во все тяжкие (то есть используем в ДВА раза меньше тонера)!
// Теперь нам нужно не просто увеличивать значение consumptionTotal при каждой итерации на 70,
// но и проверять в каком режиме печати мы находимся (экономичном или обычном) и какую по счёту страницу документа печатаем. Тут пригодятся условия.
// После переменной consumptionPerPage создайте переменную economyMode, которая содержит false
// В цикле после keks.print добавьте условие, которое срабатывает, если economyMode равен true и номер текущей страницы page больше 3
// Внутри этого условия увеличивайте consumptionTotal на consumptionPerPage * 0.5 с помощью оператора +=

let economyMode = false;

for (let page = 1; page <= totalPages; page++) {
  console.log('Печать страницы ' + page);
  if (economyMode && page > 3) {
    consumptionTotal += consumptionPerPage * 0.5
  }
  consumptionTotal += consumptionPerPage;
  console.log(consumptionTotal);
}

// 16: Экономим краску
// Получается, если включён экономичный режим и номер страницы больше трёх,
// мы тратим половину краски от обычного режима на одну страницу. А потом, неважно,
// сработает условие или нет, мы обязательно увеличиваем расход ещё consumptionTotal += consumptionPerPage;.
// Получается не экономия, а сплошные расходы. Добавим ветку else к условию и перенесём туда строку consumptionTotal += consumptionPerPage;.
// Затем включим режим экономии тонера и проверим, что всё работает правильно.
// Добавьте ветку else и перенесите туда consumptionTotal += consumptionPerPage;.
// Поменяйте значение economyMode на true

for (let page = 1; page <= totalPages; page++) {
  console.log('Печать страницы ' + page);
  if (economyMode && page > 3) {
    consumptionTotal += consumptionPerPage * 0.5;
  } else {
    consumptionTotal += consumptionPerPage;
  }
  console.log(consumptionTotal);
}

// the end